//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _RootShaderParameters
// {
//
//   int2 OutputResolution;             // Offset:    0 Size:     8
//   int2 ResolutionOffset;             // Offset:    8 Size:     8 [unused]
//   uint MaxNodeCount;                 // Offset:   16 Size:     4
//   uint bSortSampleByDepth;           // Offset:   20 Size:     4 [unused]
//   float DepthTheshold;               // Offset:   24 Size:     4 [unused]
//   float CosTangentThreshold;         // Offset:   28 Size:     4 [unused]
//   float CoverageThreshold;           // Offset:   32 Size:     4
//   uint VelocityType;                 // Offset:   36 Size:     4 [unused]
//   int2 TileCountXY;                  // Offset:   40 Size:     8
//   uint TileSize;                     // Offset:   48 Size:     4
//
// }
//
// Resource bind info for OutCompactNodeVis
// {
//
//   struct FPackedHairVis
//   {
//       
//       uint Depth_Coverage8bit;       // Offset:    0
//       uint PrimitiveID_MaterialID;   // Offset:    4
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// SceneDepthTexture                 texture   float          2d             t0      1 
// MSAA_IDTexture                    texture    uint          2d             t1      1 
// MSAA_DepthTexture                 texture   float          2d             t2      1 
// TileCountBuffer                   texture    uint         buf             t3      1 
// TileDataBuffer                    texture   uint2         buf             t4      1 
// ViewTransmittanceTexture          texture   float          2d             t5      1 
// OutCompactNodeCounter                 UAV    uint          2d             u0      1 
// OutCompactNodeIndex                   UAV    uint          2d             u1      1 
// OutCompactNodeVis                     UAV  struct         r/w             u2      1 
// OutCompactNodeCoord                   UAV   uint2         buf             u3      1 
// OutCoverageTexture                    UAV   float          2d             u4      1 
// _RootShaderParameters             cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (uint,uint,uint,uint) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_buffer (uint,uint,uint,uint) t3
dcl_resource_buffer (uint,uint,uint,uint) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_uav_typed_texture2d (uint,uint,uint,uint) u0
dcl_uav_typed_texture2d (uint,uint,uint,uint) u1
dcl_uav_structured u2, 8
dcl_uav_typed_buffer (uint,uint,uint,uint) u3
dcl_uav_typed_texture2d (float,float,float,float) u4
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.xy
dcl_input vThreadIDInGroup.xy
dcl_temps 4
dcl_indexableTemp x0[1], 4
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 4
dcl_thread_group 8, 8, 1
ieq r0.x, vThreadIDInGroupFlattened.x, l(0)
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.x, l(0), l(0)
endif 
ld_indexable(buffer)(uint,uint,uint,uint) r0.y, l(0, 0, 0, 0), t3.yxzw
imad r0.z, vThreadGroupID.y, cb0[2].z, vThreadGroupID.x
uge r0.y, r0.z, r0.y
if_nz r0.y
  ret 
endif 
ld_indexable(buffer)(uint,uint,uint,uint) r0.yz, r0.zzzz, t4.zxyw
imad r0.yz, r0.yyzy, cb0[3].xxxx, vThreadIDInGroup.xxyx
uge r1.xy, r0.yzyy, cb0[0].xyxx
or r0.w, r1.y, r1.x
movc r1.xy, r0.wwww, l(0,0,0,0), r0.yzyy
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(uint,uint,uint,uint) r0.y, r1.xyww, t1.yxzw
ine r0.z, r0.y, l(-1)
if_nz r0.z
  ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t0.yzxw
  ld_indexable(texture2d)(float,float,float,float) r0.w, r1.xyww, t2.yzwx
  ge r0.z, r0.w, r0.z
  mov x0[0].x, r0.y
  mov x0[0].y, l(1)
  mov x0[0].w, r0.w
  and r0.y, r0.z, l(1)
  mov r0.z, r0.y
else 
  mov r0.yz, l(0,0,0,0)
endif 
if_nz r0.z
  imm_atomic_iadd r2.x, g0, l(0), l(1)
else 
  mov r2.x, l(0)
endif 
sync_g_t
ld_raw r0.w, l(0), g0.xxxx
ult r2.y, l(0), r0.w
and r0.x, r0.x, r2.y
if_nz r0.x
  imm_atomic_iadd r3.x, u0, l(0, 0, 0, 0), r0.w
  store_raw g1.x, l(0), r3.x
endif 
sync_g_t
if_nz r0.z
  ld_raw r0.x, l(0), g1.xxxx
  iadd r2.x, r0.x, r2.x
  iadd r0.x, r2.x, l(1)
  ult r0.x, r0.x, cb0[1].x
  if_nz r0.x
    mov r3.yzw, x0[0].xxyw
    utof r0.x, r3.z
    utof r0.y, r0.y
    div r0.x, r0.x, r0.y
    mul r0.x, r0.x, l(256.000000)
    ftou r0.x, r0.x
    umin r0.x, r0.x, l(255)
    mul r0.y, r3.w, l(16777215.000000)
    ftou r0.y, r0.y
    bfi r3.x, l(24), l(8), r0.y, r0.x
    store_structured u2.xy, r2.x, l(0), r3.xyxx
    store_uav_typed u3.xyzw, r2.xxxx, r1.xyxx
    ld_indexable(texture2d)(float,float,float,float) r0.x, r1.xyzw, t5.xyzw
    add r0.x, -r0.x, l(1.000000)
    min r0.x, r0.x, l(1.000000)
    div_sat r0.x, r0.x, cb0[2].x
  else 
    mov r0.x, l(0)
  endif 
else 
  mov r0.x, l(0)
endif 
bfi r0.y, l(6), l(26), r0.z, r2.x
store_uav_typed u1.xyzw, r1.xyyy, r0.yyyy
store_uav_typed u4.xyzw, r1.xyyy, r0.xxxx
ret 
// Approximately 77 instruction slots used
